<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/loyaltyprogram/LoyaltyActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/loyaltyprogram/LoyaltyActivity.java" />
              <option name="originalContent" value="package com.example.loyaltyprogram;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class LoyaltyActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_loyalty);&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.loyaltyprogram;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.navigation.NavController;&#10;import androidx.navigation.Navigation;&#10;import androidx.navigation.ui.AppBarConfiguration;&#10;import androidx.navigation.ui.NavigationUI;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;&#10;public class LoyaltyActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_loyalty);&#10;&#10;        // Navigation setup: find NavController and wire it to the BottomNavigationView&#10;        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);&#10;        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(&#10;                R.id.homeFragment, R.id.scanFragment, R.id.profileFragment, R.id.rewardsFragment&#10;        ).build();&#10;        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);&#10;&#10;        BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);&#10;        NavigationUI.setupWithNavController(bottomNav, navController);&#10;&#10;        // Edge-to-edge: apply bottom system inset as padding to the BottomNavigationView&#10;        ViewCompat.setOnApplyWindowInsetsListener(bottomNav, (v, windowInsets) -&gt; {&#10;            Insets insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(v.getPaddingLeft(), v.getPaddingTop(), v.getPaddingRight(), insets.bottom);&#10;            return windowInsets;&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);&#10;        return navController.navigateUp() || super.onSupportNavigateUp();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/loyaltyprogram/ScanFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/loyaltyprogram/ScanFragment.java" />
              <option name="originalContent" value="package com.example.loyaltyprogram;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.content.pm.PackageManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.os.VibrationEffect;&#10;import android.os.Vibrator;&#10;import android.os.VibratorManager;&#10;import android.view.*;&#10;import android.widget.TextView;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.annotation.OptIn;&#10;import androidx.camera.core.*;&#10;import androidx.camera.lifecycle.ProcessCameraProvider;&#10;import androidx.camera.view.PreviewView;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.google.common.util.concurrent.ListenableFuture;&#10;import com.google.mlkit.vision.barcode.BarcodeScannerOptions;&#10;import com.google.mlkit.vision.barcode.BarcodeScanning;&#10;import com.google.mlkit.vision.barcode.common.Barcode;&#10;import com.google.mlkit.vision.common.InputImage;&#10;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;public class ScanFragment extends Fragment {&#10;&#10;    private static final String EXPECTED_QR = &quot;LOYALTY-STORE-QR-2025&quot;;&#10;    private static final int REWARD_POINTS = 5;&#10;&#10;    private PreviewView previewView;&#10;    private TextView tvStatus;&#10;    private Camera camera;&#10;    private ExecutorService cameraExecutor;&#10;    private boolean rewarded = false;&#10;&#10;    private final ActivityResultLauncher&lt;String&gt; permissionLauncher =&#10;            registerForActivityResult(new ActivityResultContracts.RequestPermission(),&#10;                    granted -&gt; { if (granted) startCamera(); else setStatus(&quot;Camera permission denied&quot;); });&#10;&#10;    @Nullable @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        View v = inflater.inflate(R.layout.fragment_scan, container, false);&#10;        previewView = v.findViewById(R.id.previewView);&#10;        tvStatus = v.findViewById(R.id.tvStatus);&#10;        cameraExecutor = Executors.newSingleThreadExecutor();&#10;        return v;&#10;    }&#10;&#10;    @Override public void onResume() {&#10;        super.onResume();&#10;        rewarded = false;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {&#10;            startCamera();&#10;        } else {&#10;            permissionLauncher.launch(Manifest.permission.CAMERA);&#10;        }&#10;    }&#10;&#10;    @Override public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (cameraExecutor != null) cameraExecutor.shutdown();&#10;    }&#10;&#10;    private void startCamera() {&#10;        ListenableFuture&lt;ProcessCameraProvider&gt; cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext());&#10;        cameraProviderFuture.addListener(() -&gt; {&#10;            try {&#10;                ProcessCameraProvider cameraProvider = cameraProviderFuture.get();&#10;&#10;                Preview preview = new Preview.Builder().build();&#10;                preview.setSurfaceProvider(previewView.getSurfaceProvider());&#10;&#10;                ImageAnalysis analysis = new ImageAnalysis.Builder()&#10;                        .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)&#10;                        .build();&#10;                analysis.setAnalyzer(cameraExecutor, this::analyze);&#10;&#10;                CameraSelector selector = CameraSelector.DEFAULT_BACK_CAMERA;&#10;                cameraProvider.unbindAll();&#10;                camera = cameraProvider.bindToLifecycle(getViewLifecycleOwner(), selector, preview, analysis);&#10;                setStatus(&quot;Align the QR within the frame&quot;);&#10;            } catch (Exception e) {&#10;                setStatus(&quot;Camera error: &quot; + e.getMessage());&#10;            }&#10;        }, ContextCompat.getMainExecutor(requireContext()));&#10;    }&#10;&#10;    @OptIn(markerClass = ExperimentalGetImage.class)&#10;    private void analyze(@NonNull ImageProxy imageProxy) {&#10;        ImageProxy.PlaneProxy[] planes = imageProxy.getPlanes();&#10;        if (imageProxy.getImage() == null) {&#10;            imageProxy.close();&#10;            return;&#10;        }&#10;&#10;&#10;        InputImage image = InputImage.fromMediaImage(imageProxy.getImage(), imageProxy.getImageInfo().getRotationDegrees);&#10;&#10;        BarcodeScannerOptions options = new BarcodeScannerOptions.Builder()&#10;                .setBarcodeFormats(Barcode.FORMAT_QR_CODE)&#10;                .build();&#10;&#10;        BarcodeScanning.getClient(options)&#10;                .process(image)&#10;                .addOnSuccessListener(this::handleBarcodes)&#10;                .addOnFailureListener(e -&gt; { /* ignore per-frame */ })&#10;                .addOnCompleteListener(task -&gt; imageProxy.close());&#10;    }&#10;&#10;    private void handleBarcodes(List&lt;Barcode&gt; barcodes) {&#10;        if (rewarded) return;&#10;        for (Barcode b : barcodes) {&#10;            String value = b.getRawValue();&#10;            if (value != null &amp;&amp; value.equals(EXPECTED_QR)) {&#10;                rewarded = true;&#10;                onValidQr();&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onValidQr() {&#10;        vibrate();&#10;        setStatus(&quot;QR valid. +&quot; + REWARD_POINTS + &quot; points added!&quot;);&#10;        Snackbar.make(requireView(), &quot;Reward applied: +&quot; + REWARD_POINTS, Snackbar.LENGTH_LONG).show();&#10;        PointsRepository.getInstance(requireContext()).addPointsAsync(REWARD_POINTS);&#10;    }&#10;&#10;    private void setStatus(String s) {&#10;        if (tvStatus != null) tvStatus.setText(s);&#10;    }&#10;&#10;    @SuppressLint({&quot;MissingPermission&quot;, &quot;NewApi&quot;})&#10;    private void vibrate() {&#10;        if (Build.VERSION.SDK_INT &gt;= 31) {&#10;            VibratorManager vm = requireContext().getSystemService(VibratorManager.class);&#10;            if (vm != null) vm.getDefaultVibrator().vibrate(VibrationEffect.createOneShot(60, VibrationEffect.DEFAULT_AMPLITUDE));&#10;        } else {&#10;            Vibrator v = (Vibrator) requireContext().getSystemService(Vibrator.class);&#10;            if (v != null) v.vibrate(VibrationEffect.createOneShot(60, VibrationEffect.DEFAULT_AMPLITUDE));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.loyaltyprogram;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.content.Context;&#10;import android.content.pm.PackageManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.os.VibrationEffect;&#10;import android.os.Vibrator;&#10;import android.os.VibratorManager;&#10;import android.view.*;&#10;import android.widget.TextView;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.annotation.OptIn;&#10;import androidx.camera.core.*;&#10;import androidx.camera.core.ExperimentalGetImage;&#10;import androidx.camera.lifecycle.ProcessCameraProvider;&#10;import androidx.camera.view.PreviewView;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.google.common.util.concurrent.ListenableFuture;&#10;import com.google.mlkit.vision.barcode.BarcodeScannerOptions;&#10;import com.google.mlkit.vision.barcode.BarcodeScanning;&#10;import com.google.mlkit.vision.barcode.common.Barcode;&#10;import com.google.mlkit.vision.common.InputImage;&#10;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;public class ScanFragment extends Fragment {&#10;&#10;    private static final String EXPECTED_QR = &quot;LOYALTY-STORE-QR-2025&quot;;&#10;    private static final int REWARD_POINTS = 5;&#10;&#10;    private PreviewView previewView;&#10;    private TextView tvStatus;&#10;    private ExecutorService cameraExecutor;&#10;    private boolean rewarded = false;&#10;&#10;    private final ActivityResultLauncher&lt;String&gt; permissionLauncher =&#10;            registerForActivityResult(new ActivityResultContracts.RequestPermission(),&#10;                    granted -&gt; { if (granted) startCamera(); else setStatus(&quot;Camera permission denied&quot;); });&#10;&#10;    @Nullable @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        View v = inflater.inflate(R.layout.fragment_scan, container, false);&#10;        previewView = v.findViewById(R.id.previewView);&#10;        tvStatus = v.findViewById(R.id.tvStatus);&#10;        cameraExecutor = Executors.newSingleThreadExecutor();&#10;        return v;&#10;    }&#10;&#10;    @Override public void onResume() {&#10;        super.onResume();&#10;        rewarded = false;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {&#10;            startCamera();&#10;        } else {&#10;            permissionLauncher.launch(Manifest.permission.CAMERA);&#10;        }&#10;    }&#10;&#10;    @Override public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (cameraExecutor != null) cameraExecutor.shutdown();&#10;    }&#10;&#10;    private void startCamera() {&#10;        ListenableFuture&lt;ProcessCameraProvider&gt; cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext());&#10;        cameraProviderFuture.addListener(() -&gt; {&#10;            try {&#10;                ProcessCameraProvider cameraProvider = cameraProviderFuture.get();&#10;&#10;                Preview preview = new Preview.Builder().build();&#10;                preview.setSurfaceProvider(previewView.getSurfaceProvider());&#10;&#10;                ImageAnalysis analysis = new ImageAnalysis.Builder()&#10;                        .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)&#10;                        .build();&#10;                analysis.setAnalyzer(cameraExecutor, this::analyze);&#10;&#10;                CameraSelector selector = CameraSelector.DEFAULT_BACK_CAMERA;&#10;                cameraProvider.unbindAll();&#10;                cameraProvider.bindToLifecycle(getViewLifecycleOwner(), selector, preview, analysis);&#10;                setStatus(&quot;Align the QR within the frame&quot;);&#10;            } catch (Exception e) {&#10;                setStatus(&quot;Camera error: &quot; + e.getMessage());&#10;            }&#10;        }, ContextCompat.getMainExecutor(requireContext()));&#10;    }&#10;&#10;    @OptIn(markerClass = ExperimentalGetImage.class)&#10;    private void analyze(@NonNull ImageProxy imageProxy) {&#10;        if (imageProxy.getImage() == null) {&#10;            imageProxy.close();&#10;            return;&#10;        }&#10;&#10;&#10;        InputImage image = InputImage.fromMediaImage(imageProxy.getImage(), imageProxy.getImageInfo().getRotationDegrees());&#10;&#10;        BarcodeScannerOptions options = new BarcodeScannerOptions.Builder()&#10;                .setBarcodeFormats(Barcode.FORMAT_QR_CODE)&#10;                .build();&#10;&#10;        BarcodeScanning.getClient(options)&#10;                .process(image)&#10;                .addOnSuccessListener(this::handleBarcodes)&#10;                .addOnFailureListener(e -&gt; { /* ignore per-frame */ })&#10;                .addOnCompleteListener(task -&gt; imageProxy.close());&#10;    }&#10;&#10;    private void handleBarcodes(List&lt;Barcode&gt; barcodes) {&#10;        if (rewarded) return;&#10;        for (Barcode b : barcodes) {&#10;            String value = b.getRawValue();&#10;            if (value != null &amp;&amp; value.equals(EXPECTED_QR)) {&#10;                rewarded = true;&#10;                onValidQr();&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    private void onValidQr() {&#10;        vibrate();&#10;        setStatus(&quot;QR valid. +&quot; + REWARD_POINTS + &quot; points added!&quot;);&#10;        Snackbar.make(requireView(), &quot;Reward applied: +&quot; + REWARD_POINTS, Snackbar.LENGTH_LONG).show();&#10;        PointsRepository.getInstance(requireContext()).addPointsAsync(REWARD_POINTS);&#10;    }&#10;&#10;    private void setStatus(String s) {&#10;        if (tvStatus != null) tvStatus.setText(s);&#10;    }&#10;&#10;    @SuppressLint({&quot;MissingPermission&quot;, &quot;NewApi&quot;})&#10;    private void vibrate() {&#10;        if (Build.VERSION.SDK_INT &gt;= 31) {&#10;            VibratorManager vm = requireContext().getSystemService(VibratorManager.class);&#10;            if (vm != null) vm.getDefaultVibrator().vibrate(VibrationEffect.createOneShot(60, VibrationEffect.DEFAULT_AMPLITUDE));&#10;        } else {&#10;            Vibrator v = (Vibrator) requireContext().getSystemService(Context.VIBRATOR_SERVICE);&#10;            if (v != null) v.vibrate(VibrationEffect.createOneShot(60, VibrationEffect.DEFAULT_AMPLITUDE));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/loyaltyprogram/SplashActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/loyaltyprogram/SplashActivity.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_splash.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_splash.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/bottom_nav_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/bottom_nav_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/navigation_home&quot;&#10;        android:icon=&quot;@drawable/ic_home&quot;&#10;        android:title=&quot;Home&quot; /&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/navigation_rewards&quot;&#10;        android:icon=&quot;@drawable/ic_gift&quot;&#10;        android:title=&quot;Rewards&quot; /&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/navigation_scan&quot;&#10;        android:icon=&quot;@drawable/ic_qr_code&quot;&#10;        android:title=&quot;Scan&quot; /&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/navigation_activity&quot;&#10;        android:icon=&quot;@drawable/ic_history&quot;&#10;        android:title=&quot;Activity&quot; /&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/navigation_profile&quot;&#10;        android:icon=&quot;@drawable/ic_profile&quot;&#10;        android:title=&quot;Profile&quot; /&gt;&#10;&#10;&lt;/menu&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#13;&#10;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/homeFragment&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_home&quot;&#13;&#10;        android:title=&quot;Home&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/rewardsFragment&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_gift&quot;&#13;&#10;        android:title=&quot;Rewards&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/scanFragment&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_qr_code&quot;&#13;&#10;        android:title=&quot;Scan&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/profileFragment&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_profile&quot;&#13;&#10;        android:title=&quot;Profile&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>